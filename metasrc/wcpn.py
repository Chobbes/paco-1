from __future__ import print_function
import sys
from pacolib import *

if len(sys.argv) < 2:
    sys.stderr.write("\nUsage: "+sys.argv[0]+" relsize\n\n")
    sys.exit(1)

relsize = int(sys.argv[1])
n = relsize

print ("Require Import paco"+str(n)+" cpn"+str(n)+" cpntac.")
print ("Set Implicit Arguments.")
print ("")

print ("Section WCompanion"+str(n)+".")
print ("")

for i in range(n):
    print ("Variable T"+str(i)+" : "+ifpstr(i,"forall"),end="")
    for j in range(i):
        print (" (x"+str(j)+": @T"+str(j)+itrstr(" x",j)+")",end="")
    print (ifpstr(i,", ")+"Type.")
print ("")

print ("Local Notation rel := (rel"+str(n)+itrstr(" T", n)+").")
print ("")

print ("Section WCompanion"+str(n)+"_main.")
print ("")

print ("Variable gf: rel -> rel.")
print ("Hypothesis gf_mon: monotone"+str(n)+" gf.")
print ("")

print ("Inductive wcpn"+str(n)+" (r rg : rel)"+itrstr(" e", n)+" : Prop :=")
print ("| wcpn"+str(n)+"_intro (IN: cpn"+str(n)+" gf (r \\"+str(n)+"/ gcpn"+str(n)+" gf rg)"+itrstr(" e", n)+")")
print (".              ")
print ("Hint Constructors wcpn"+str(n)+".")
print ("")
print ("Lemma wcpn"+str(n)+"_mon r r' rg rg'"+itrstr(" e", n)+"")
print ("      (IN: @wcpn"+str(n)+" r rg"+itrstr(" e", n)+")")
print ("      (LEr: r <"+str(n)+"= r')")
print ("      (LErg: rg <"+str(n)+"= rg'):")
print ("  @wcpn"+str(n)+" r' rg'"+itrstr(" e", n)+".")
print ("Proof.")
print ("  destruct IN. constructor.")
print ("  eapply cpn"+str(n)+"_mon. apply IN. intros.")
print ("  destruct PR. left. apply LEr, H. right.")
print ("  eapply gcpn"+str(n)+"_mon. apply gf_mon. apply H. apply LErg.")
print ("Qed.")
print ("")
print ("Lemma wcpn"+str(n)+"_inc_mon r rg:")
print ("  monotone"+str(n)+" (fun x : rel => wcpn"+str(n)+" r (rg \\"+str(n)+"/ x)).")
print ("Proof.")
print ("  red; intros.")
print ("  eapply wcpn"+str(n)+"_mon. apply IN. intros. apply PR.")
print ("  intros. destruct PR. left. apply H. right. apply LE, H. ")
print ("Qed.")
print ("")
print ("Lemma wcpn"+str(n)+"_init r: wcpn"+str(n)+" r r <"+str(n)+"= cpn"+str(n)+" gf r.")
print ("Proof.")
print ("  intros. destruct PR.")
print ("  ucpn.")
print ("  eapply cpn"+str(n)+"_mon; [apply IN|].")
print ("  intros. destruct PR.")
print ("  - ubase. apply H.")
print ("  - ustep. apply H.")
print ("Qed.")
print ("")
print ("Lemma wcpn"+str(n)+"_final r rg: cpn"+str(n)+" gf r <"+str(n)+"= wcpn"+str(n)+" r rg.")
print ("Proof.")
print ("  constructor. eapply cpn"+str(n)+"_mon. apply PR.")
print ("  intros. left. apply PR0.")
print ("Qed.")
print ("")
print ("Lemma wcpn"+str(n)+"_base r rg:")
print ("  r <"+str(n)+"= wcpn"+str(n)+" r rg.")
print ("Proof.")
print ("  intros. constructor. ubase. left. apply PR.")
print ("Qed.")
print ("")
print ("Lemma wcpn"+str(n)+"_step r rg:")
print ("  gf (wcpn"+str(n)+" rg rg) <"+str(n)+"= wcpn"+str(n)+" r rg.")
print ("Proof.")
print ("  intros. constructor. ubase. right.")
print ("  eapply gf_mon. apply PR.")
print ("  intros. apply wcpn"+str(n)+"_init. apply PR0.")
print ("Qed.")
print ("")
print ("Lemma wcpn"+str(n)+"_cpn r rg:")
print ("  cpn"+str(n)+" gf (wcpn"+str(n)+" r rg) <"+str(n)+"= wcpn"+str(n)+" r rg.")
print ("Proof.")
print ("  intros. constructor. ucpn.")
print ("  eapply cpn"+str(n)+"_mon. apply PR.")
print ("  intros. destruct PR0. apply IN.")
print ("Qed.")
print ("")
print ("Lemma wcpn"+str(n)+"_clo r rg")
print ("      clo (LE: clo <"+str(n+1)+"= cpn"+str(n)+" gf):")
print ("  clo (wcpn"+str(n)+" r rg) <"+str(n)+"= wcpn"+str(n)+" r rg.")
print ("Proof.")
print ("  intros. apply wcpn"+str(n)+"_cpn, LE, PR.")
print ("Qed.")
print ("")
print ("Definition cut"+str(n)+" (x y z: rel) : rel :="+ifpstr(n," fun"+itrstr(" e", n)+" =>")+" y <"+str(n)+"= z /\ x"+itrstr(" e", n)+".")
print ("")
print ("Lemma cut"+str(n)+"_mon x y : monotone"+str(n)+" (cut"+str(n)+" x y).")
print ("Proof.")
print ("  repeat red. intros. destruct IN. split.")
print ("  - intros. apply LE, H, PR.")
print ("  - apply H0.")
print ("Qed.")
print ("")
print ("Lemma cut"+str(n)+"_wcomp r rg (LE: r <"+str(n)+"= rg) :")
print ("  wcompatible"+str(n)+" gf (cut"+str(n)+" (cpn"+str(n)+" (fun x => wcpn"+str(n)+" r (rg \\"+str(n)+"/ x)) bot"+str(n)+") rg).")
print ("Proof.")
print ("  set (pfix := cpn"+str(n)+" (fun x => wcpn"+str(n)+" r (rg \\"+str(n)+"/ x)) bot"+str(n)+").")
print ("  ")
print ("  econstructor; [apply cut"+str(n)+"_mon|]. intros.")
print ("  destruct PR as [LEz FIX].")
print ("  uunfold FIX; [|apply wcpn"+str(n)+"_inc_mon].")
print ("  eapply gf_mon, rclo"+str(n)+"_cpn.")
print ("  apply cpn"+str(n)+"_compat; [apply gf_mon|].")
print ("  eapply cpn"+str(n)+"_mon; [apply FIX|]. clear"+itrstr(" x", n)+" FIX; intros.")
print ("")
print ("  destruct PR as [PR | PR].")
print ("  - apply LE in PR. apply LEz in PR.")
print ("    eapply gf_mon. apply PR.")
print ("    intros. apply rclo"+str(n)+"_base. apply PR0.")
print ("  - eapply gf_mon; [apply PR|]. clear"+itrstr(" x", n)+" PR; intros.")
print ("    eapply rclo"+str(n)+"_cpn.")
print ("    eapply cpn"+str(n)+"_mon. apply PR. clear"+itrstr(" x", n)+" PR; intros.")
print ("    destruct PR as [PR | PR].")
print ("    + apply rclo"+str(n)+"_step. eapply gf_mon. apply LEz, PR.")
print ("      intros. apply rclo"+str(n)+"_base, PR0.")
print ("    + apply rclo"+str(n)+"_clo. split.")
print ("      * intros. apply rclo"+str(n)+"_step.")
print ("        eapply gf_mon. apply LEz. apply PR0.")
print ("        intros. apply rclo"+str(n)+"_base. apply PR1.")
print ("      * apply PR.")
print ("Qed.")
print ("")
print ("Lemma fix"+str(n)+"_le_cpn r rg (LE: r <"+str(n)+"= rg) :")
print ("  cpn"+str(n)+" (fun x => wcpn"+str(n)+" r (rg \\"+str(n)+"/ x)) bot"+str(n)+" <"+str(n)+"= cpn"+str(n)+" gf rg.")
print ("Proof.")
print ("  intros. eexists.")
print ("  - apply wcompat"+str(n)+"_compat, cut"+str(n)+"_wcomp. apply gf_mon. apply LE.")
print ("  - apply rclo"+str(n)+"_clo. split.")
print ("    + intros. apply rclo"+str(n)+"_base. apply PR0.")
print ("    + apply PR.")
print ("Qed.")
print ("")
print ("Lemma fix"+str(n)+"_le_wcpn r rg (LE: r <"+str(n)+"= rg):")
print ("  cpn"+str(n)+" (fun x => wcpn"+str(n)+" r (rg \\"+str(n)+"/ x)) bot"+str(n)+" <"+str(n)+"= wcpn"+str(n)+" r rg.")
print ("Proof.")
print ("  (*")
print ("    fix")
print ("    =")
print ("    c(r + gc(rg + fix))")
print ("    <=")
print ("    c(r + gc(rg + c(rg)))  (by Lemma fix"+str(n)+"_le_cpn)")
print ("    <=")
print ("    c(r + gc(rg))")
print ("   *)")
print ("  ")
print ("  intros. uunfold PR; [| apply wcpn"+str(n)+"_inc_mon].")
print ("  destruct PR. constructor.")
print ("  eapply cpn"+str(n)+"_mon. apply IN. intros.")
print ("  destruct PR. left; apply H. right.")
print ("  eapply gf_mon.  apply H. intros.")
print ("  ucpn.")
print ("  eapply cpn"+str(n)+"_mon. apply PR. intros.")
print ("  destruct PR0.")
print ("  - ubase. apply H0.")
print ("  - eapply fix"+str(n)+"_le_cpn. apply LE. apply H0.")
print ("Qed.")
print ("")
print ("Lemma wcpn"+str(n)+"_cofix: forall")
print ("    r rg (LE: r <"+str(n)+"= rg)")
print ("    l (OBG: forall rr (INC: rg <"+str(n)+"= rr) (CIH: l <"+str(n)+"= rr), l <"+str(n)+"= wcpn"+str(n)+" r rr),")
print ("  l <"+str(n)+"= wcpn"+str(n)+" r rg.")
print ("Proof.")
print ("  intros. apply fix"+str(n)+"_le_wcpn. apply LE.")
print ("  eapply cpn"+str(n)+"_algebra, PR. apply wcpn"+str(n)+"_inc_mon.")
print ("  intros. eapply OBG; intros.")
print ("  - left. apply PR1.")
print ("  - right. apply PR1.")
print ("  - apply PR0.")
print ("Qed.")
print ("")
print ("End WCompanion"+str(n)+"_main.")
print ("")
print ("Lemma wcpn"+str(n)+"_mon_bot (gf gf': rel -> rel)"+itrstr(" e", n)+" r rg")
print ("      (IN: @wcpn"+str(n)+" gf bot"+str(n)+" bot"+str(n)+""+itrstr(" e", n)+")")
print ("      (MONgf: monotone"+str(n)+" gf)")
print ("      (MONgf': monotone"+str(n)+" gf')")
print ("      (LE: gf <"+str(n+1)+"= gf'):")
print ("  @wcpn"+str(n)+" gf' r rg"+itrstr(" e", n)+".")
print ("Proof.")
print ("  destruct IN. constructor.")
print ("  eapply cpn"+str(n)+"_mon; [| intros; right; eapply PR].")
print ("  ubase.")
print ("  eapply gcpn"+str(n)+"_mon_bot, LE; [|apply MONgf|apply MONgf'].")
print ("  eapply MONgf, cpn"+str(n)+"_cpn; [| apply MONgf].")
print ("  eapply (compat"+str(n)+"_compat (cpn"+str(n)+"_compat MONgf)).")
print ("  eapply cpn"+str(n)+"_mon. apply IN.")
print ("  intros. destruct PR. contradiction. apply H.")
print ("Qed.")
print ("")
print ("End WCompanion"+str(n)+".")
print ("")
print ("Hint Constructors wcpn"+str(n)+" : paco.")
print ("")
print ("Hint Resolve wcpn"+str(n)+"_base : paco.")
print ("Hint Resolve wcpn"+str(n)+"_step : paco.")
print ("Hint Resolve wcpn"+str(n)+"_final : paco.")
print ("")
