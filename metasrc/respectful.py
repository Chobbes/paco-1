from __future__ import print_function
import sys
from pacolib import *

if len(sys.argv) < 2:
    sys.stderr.write('\nUsage: '+sys.argv[0]+' relsize\n\n')
    sys.exit(1)

relsize = int(sys.argv[1])
n = relsize

print ('Require Import paco'+str(n)+'.')
print ('Require Export Program.')
print ('Set Implicit Arguments.')
print ('')

print ('Section Respectful'+str(n)+'.')
print ('')

for i in range(n):
    print ('Variable T'+str(i)+' : '+ifpstr(i,'forall'),end='')
    for j in range(i):
        print (' (x'+str(j)+': @T'+str(j)+itrstr(" x",j)+')',end='')
    print (ifpstr(i,', ')+'Type.')
print ('')

print ('Local Notation rel := (rel'+str(n)+itrstr(' T', n)+').')
print ('')

print ('Variable gf: rel -> rel.')
print ('Hypothesis gf_mon: monotone'+str(n)+' gf.')
print ('')

print ('Inductive sound'+str(n)+' (clo: rel -> rel): Prop :=')
print ('| sound'+str(n)+'_intro')
print ('    (MON: monotone'+str(n)+' clo)')
print ('    (SOUND:')
print ('       forall r (PFIX: r <'+str(n)+'= gf (clo r)),')
print ('         r <'+str(n)+'= paco'+str(n)+' gf bot'+str(n)+')')
print ('.')
print ('Hint Constructors sound'+str(n)+'.')
print ('')

print ('Structure respectful'+str(n)+' (clo: rel -> rel) : Prop :=')
print ('  respectful'+str(n)+'_intro {')
print ('      MON: monotone'+str(n)+' clo;')
print ('      RESPECTFUL:')
print ('        forall l r (LE: l <'+str(n)+'= r) (GF: l <'+str(n)+'= gf r),')
print ('          clo l <'+str(n)+'= gf (clo r);')
print ('    }.')
print ('Hint Constructors respectful'+str(n)+'.')
print ('')

print ('Inductive gres'+str(n)+' (r: rel)'+itrstr(' e', n)+' : Prop :=')
print ('| gres'+str(n)+'_intro')
print ('    clo')
print ('    (RES: respectful'+str(n)+' clo)')
print ('    (CLO: clo r'+itrstr(' e', n)+')')
print ('.')
print ('Hint Constructors gres'+str(n)+'.')

print ('Lemma gfclo'+str(n)+'_mon: forall clo, sound'+str(n)+' clo -> monotone'+str(n)+' (compose gf clo).')
print ('Proof. intros; destruct H; eauto using gf_mon. Qed.')
print ('Hint Resolve gfclo'+str(n)+'_mon : paco.')
print ('')

print ('Lemma sound'+str(n)+'_is_gf: forall clo (UPTO: sound'+str(n)+' clo),')
print ('    paco'+str(n)+' (compose gf clo) bot'+str(n)+' <'+str(n)+'= paco'+str(n)+' gf bot'+str(n)+'.')
print ('Proof.')
print ('  intros. punfold PR. edestruct UPTO.')
print ('  eapply (SOUND (paco'+str(n)+' (compose gf clo) bot'+str(n)+')); [|eauto].')
print ('  intros. punfold PR0.')
print (ifpstr(n,'  eapply (gfclo'+str(n)+'_mon UPTO); eauto. intros. destruct PR1; eauto. contradiction.'))
print ('Qed.')
print ('')

print ('Lemma respectful'+str(n)+'_is_sound'+str(n)+': respectful'+str(n)+' <1= sound'+str(n)+'.')
print ('Proof.')
print ('  intro clo.')
print ('  set (rclo := fix rclo clo n (r: rel) :=')
print ('         match n with')
print ('         | 0 => r')
print ('         | S n\' => rclo clo n\' r \\'+str(n)+'/ clo (rclo clo n\' r)')
print ('         end).')
print ('  intros. destruct PR. econstructor; eauto.')
print ('  intros. set (rr'+itrstr(' e', n)+' := exists n, rclo clo n r'+itrstr(' e', n)+').')
print ('  assert (rr'+itrstr(' x', n)+') by (exists 0; eauto); clear PR.')
print ('  cut (forall n, rclo clo n r <'+str(n)+'= gf (rclo clo (S n) r)).')
print ('  { intro X; revert'+itrstr(' x', n)+' H; pcofix CIH; intros.')
print ('    unfold rr in *; destruct H0; eauto 10 using gf_mon. }')
print ('  induction n; intros; [simpl; eauto using gf_mon|].')
print ('  simpl in *; destruct PR; [eauto using gf_mon|].')
print ('  eapply gf_mon; [eapply RESPECTFUL0; [|apply IHn|]|]; instantiate; simpl; eauto.')
print ('Qed.')
print ('')

print ('Lemma respectful'+str(n)+'_compose')
print ('      clo0 clo1')
print ('      (RES0: respectful'+str(n)+' clo0)')
print ('      (RES1: respectful'+str(n)+' clo1):')
print ('  respectful'+str(n)+' (compose clo0 clo1).')
print ('Proof.')
print ('  intros. destruct RES0, RES1.')
print ('  econstructor.')
print ('  - repeat intro. eapply MON0; eauto.')
print ('  - intros. eapply RESPECTFUL0; [| |apply PR].')
print ('    + intros. eapply MON1; eauto.')
print ('    + intros. eapply RESPECTFUL1; eauto.')
print ('Qed.')
print ('')

print ('Lemma grespectful'+str(n)+'_respectful'+str(n)+': respectful'+str(n)+' gres'+str(n)+'.')
print ('Proof.')
print ('  econstructor; repeat intro.')
print ('  - destruct IN; destruct RES; exists clo; eauto.')
print ('  - destruct PR; destruct RES; eapply gf_mon with (r:=clo r); eauto.')
print ('Qed.')
print ('')

print ('Lemma gfgres'+str(n)+'_mon: monotone'+str(n)+' (compose gf gres'+str(n)+').')
print ('Proof.')
print ('  destruct grespectful'+str(n)+'_respectful'+str(n)+'; eauto using gf_mon.')
print ('Qed.')
print ('Hint Resolve gfgres'+str(n)+'_mon : paco.')
print ('')

print ('Lemma grespectful'+str(n)+'_greatest: forall clo (RES: respectful'+str(n)+' clo), clo <'+str(n+1)+'= gres'+str(n)+'.')
print ('Proof. eauto. Qed.')
print ('')

print ('Lemma grespectful'+str(n)+'_incl: forall r, r <'+str(n)+'= gres'+str(n)+' r.')
print ('Proof.')
print ('  intros; eexists (fun x => x); eauto.')
print ('Qed.')
print ('Hint Resolve grespectful'+str(n)+'_incl.')
print ('')

print ('Lemma grespectful'+str(n)+'_compose: forall clo (RES: respectful'+str(n)+' clo) r,')
print ('    clo (gres'+str(n)+' r) <'+str(n)+'= gres'+str(n)+' r.')
print ('Proof.')
print ('  intros; eapply grespectful'+str(n)+'_greatest with (clo := compose clo gres'+str(n)+');')
print ('    eauto using respectful'+str(n)+'_compose, grespectful'+str(n)+'_respectful'+str(n)+'.')
print ('Qed.')
print ('')

print ('Lemma grespectful'+str(n)+'_incl_rev: forall r,')
print ('    gres'+str(n)+' (paco'+str(n)+' (compose gf gres'+str(n)+') r) <'+str(n)+'= paco'+str(n)+' (compose gf gres'+str(n)+') r.')
print ('Proof.')
print ('  intro r; pcofix CIH; intros; pfold.')
print ('  eapply gf_mon, grespectful'+str(n)+'_compose, grespectful'+str(n)+'_respectful'+str(n)+'.')
print ('  destruct grespectful'+str(n)+'_respectful'+str(n)+'; eapply RESPECTFUL0, PR; intros; [apply grespectful'+str(n)+'_incl; eauto|].')
print ('  punfold PR0.')
print ('  eapply gfgres'+str(n)+'_mon; eauto; intros; destruct PR1; eauto.')
print ('Qed.')
print ('')

print ('Inductive rclo'+str(n)+' clo (r: rel): rel :=')
print ('| rclo'+str(n)+'_incl')
print ('   '+itrstr(' e', n)+'')
print ('    (R: r'+itrstr(' e', n)+'):')
print ('    @rclo'+str(n)+' clo r'+itrstr(' e', n)+'')
print ('| rclo'+str(n)+'_step\'')
print ('    r\''+itrstr(' e', n)+'')
print ('    (R\': r\' <'+str(n)+'= rclo'+str(n)+' clo r)')
print ('    (CLOR\':clo r\''+itrstr(' e', n)+'):')
print ('    @rclo'+str(n)+' clo r'+itrstr(' e', n)+'')
print ('| rclo'+str(n)+'_gf')
print ('    r\''+itrstr(' e', n)+'')
print ('    (R\': r\' <'+str(n)+'= rclo'+str(n)+' clo r)')
print ('    (CLOR\':@gf r\''+itrstr(' e', n)+'):')
print ('    @rclo'+str(n)+' clo r'+itrstr(' e', n)+'')
print ('.')

print ('Lemma rclo'+str(n)+'_mon clo:')
print ('  monotone'+str(n)+' (rclo'+str(n)+' clo).')
print ('Proof.')
print ('  repeat intro. induction IN; eauto using rclo'+str(n)+'.')
print ('Qed.')
print ('Hint Resolve rclo'+str(n)+'_mon: paco.')
print ('')

print ('Lemma rclo'+str(n)+'_base')
print ('      clo')
print ('      (MON: monotone'+str(n)+' clo):')
print ('  clo <'+str(n+1)+'= rclo'+str(n)+' clo.')
print ('Proof.')
print ('  simpl. intros. econstructor 2; eauto.')
print ('  eapply MON; eauto using rclo'+str(n)+'.')
print ('Qed.')
print ('')

print ('Lemma rclo'+str(n)+'_step')
print ('      (clo: rel -> rel) r:')
print ('  clo (rclo'+str(n)+' clo r) <'+str(n)+'= rclo'+str(n)+' clo r.')
print ('Proof.')
print ('  intros. econstructor 2; eauto.')
print ('Qed.')
print ('')

print ('Lemma rclo'+str(n)+'_rclo'+str(n)+'')
print ('      clo r')
print ('      (MON: monotone'+str(n)+' clo):')
print ('  rclo'+str(n)+' clo (rclo'+str(n)+' clo r) <'+str(n)+'= rclo'+str(n)+' clo r.')
print ('Proof.')
print ('  intros. induction PR; eauto using rclo'+str(n)+'.')
print ('Qed.')
print ('')

print ('Structure weak_respectful'+str(n)+' (clo: rel -> rel) : Prop :=')
print ('  weak_respectful'+str(n)+'_intro {')
print ('      WEAK_MON: monotone'+str(n)+' clo;')
print ('      WEAK_RESPECTFUL:')
print ('        forall l r (LE: l <'+str(n)+'= r) (GF: l <'+str(n)+'= gf r),')
print ('          clo l <'+str(n)+'= gf (rclo'+str(n)+' clo r);')
print ('    }.')
print ('Hint Constructors weak_respectful'+str(n)+'.')
print ('')

print ('Lemma weak_respectful'+str(n)+'_respectful'+str(n)+'')
print ('      clo (RES: weak_respectful'+str(n)+' clo):')
print ('  respectful'+str(n)+' (rclo'+str(n)+' clo).')
print ('Proof.')
print ('  inversion RES. econstructor; eauto with paco. intros.')
print ('  induction PR; intros.')
print ('  - eapply gf_mon; eauto. intros.')
print ('    apply rclo'+str(n)+'_incl. auto.')
print ('  - eapply gf_mon.')
print ('    + eapply WEAK_RESPECTFUL0; [|apply H|apply CLOR\'].')
print ('      intros. eapply rclo'+str(n)+'_mon; eauto.')
print ('    + intros. apply rclo'+str(n)+'_rclo'+str(n)+'; auto.')
print ('  - eapply gf_mon; eauto using rclo'+str(n)+'.')
print ('Qed.')
print ('')

print ('Lemma upto'+str(n)+'_init:')
print ('  paco'+str(n)+' (compose gf gres'+str(n)+') bot'+str(n)+' <'+str(n)+'= paco'+str(n)+' gf bot'+str(n)+'.')
print ('Proof.')
print ('  apply sound'+str(n)+'_is_gf; eauto.')
print ('  apply respectful'+str(n)+'_is_sound'+str(n)+'.')
print ('  apply grespectful'+str(n)+'_respectful'+str(n)+'.')
print ('Qed.')
print ('')

print ('Lemma upto'+str(n)+'_final:')
print ('  paco'+str(n)+' gf <'+str(n+1)+'= paco'+str(n)+' (compose gf gres'+str(n)+').')
print ('Proof.')
print ('  pcofix CIH. intros. punfold PR. pfold.')
print ('  eapply gf_mon; [|apply grespectful'+str(n)+'_incl].')
print ('  eapply gf_mon; [eauto|]. intros. right. inversion PR0; auto.')
print ('Qed.')
print ('')

print ('Lemma upto'+str(n)+'_step')
print ('      r clo (RES: weak_respectful'+str(n)+' clo):')
print ('  clo (paco'+str(n)+' (compose gf gres'+str(n)+') r) <'+str(n)+'= paco'+str(n)+' (compose gf gres'+str(n)+') r.')
print ('Proof.')
print ('  intros. apply grespectful'+str(n)+'_incl_rev.')
print ('  assert (RES\' := weak_respectful'+str(n)+'_respectful'+str(n)+' RES).')
print ('  eapply grespectful'+str(n)+'_greatest. eauto.')
print ('  eapply rclo'+str(n)+'_base; eauto.')
print ('  inversion RES. auto.')
print ('Qed.')
print ('')

print ('Lemma upto'+str(n)+'_step_under')
print ('      r clo (RES: weak_respectful'+str(n)+' clo):')
print ('  clo (gres'+str(n)+' r) <'+str(n)+'= gres'+str(n)+' r.')
print ('Proof.')
print ('  intros. apply weak_respectful'+str(n)+'_respectful'+str(n)+' in RES; eauto.')
print ('  eapply grespectful'+str(n)+'_compose; eauto. eauto using rclo'+str(n)+'.')
print ('Qed.')
print ('')

print ('End Respectful'+str(n)+'.')
print ('')

print ('Hint Constructors sound'+str(n)+'.')
print ('Hint Constructors respectful'+str(n)+'.')
print ('Hint Constructors gres'+str(n)+'.')
print ('Hint Resolve gfclo'+str(n)+'_mon : paco.')
print ('Hint Resolve gfgres'+str(n)+'_mon : paco.')
print ('Hint Resolve grespectful'+str(n)+'_incl.')
print ('Hint Resolve rclo'+str(n)+'_mon: paco.')
print ('Hint Constructors weak_respectful'+str(n)+'.')
print ('')

print ('Ltac pupto'+str(n)+'_init := eapply upto'+str(n)+'_init; eauto with paco.')
print ('Ltac pupto'+str(n)+'_final := first [eapply upto'+str(n)+'_final; eauto with paco | eapply grespectful'+str(n)+'_incl].')
print ('Ltac pupto'+str(n)+' H := first [eapply upto'+str(n)+'_step|eapply upto'+str(n)+'_step_under]; [|eapply H|]; eauto with paco.')
print ('')
