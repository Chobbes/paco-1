from __future__ import print_function
import sys
from pacolib import *
if len(sys.argv) < 2:
    sys.stderr.write("\nUsage: "+sys.argv[0]+" relsize\n\n")
    sys.exit(1)
n = int(sys.argv[1])

print ("Require Export Program.Basics. Open Scope program_scope.")
print ("Require Import paco"+str(n)+" pacotac cpn"+str(n)+".")
print ("Set Implicit Arguments.")
print ("")
print ("Section CompatiblePaco"+str(n)+".")
print ("")
for i in range(n):
    print ("Variable T"+str(i)+" : "+ifpstr(i,"forall"),end="")
    for j in range(i):
        print (" (x"+str(j)+": @T"+str(j)+itrstr(" x",j)+")",end="")
    print (ifpstr(i,", ")+"Type.")
print ("")
print ("Local Notation rel := (rel"+str(n)+""+itrstr(" T", n)+").")
print ("")
print ("Section CompatiblePaco"+str(n)+"_main.")
print ("")
print ("Variable gf: rel -> rel.")
print ("Hypothesis gf_mon: monotone"+str(n)+" gf.")
print ("")
print ("Variable clo : rel -> rel.")
print ("Hypothesis clo_compat: compatible"+str(n)+" gf clo.")
print ("")
print ("Inductive cpaco"+str(n)+" r rg"+itrstr(" x", n)+" : Prop :=")
print ("| cpaco"+str(n)+"_intro (IN: rclo"+str(n)+" clo (r \\"+str(n)+"/ paco"+str(n)+" (compose gf (rclo"+str(n)+" clo)) rg)"+itrstr(" x", n)+")")
print (".")
print ("")
print ("Definition cupaco"+str(n)+" r := cpaco"+str(n)+" r r.")
print ("")
print ("Lemma cpaco"+str(n)+"_def_mon : monotone"+str(n)+" (compose gf (rclo"+str(n)+" clo)).")
print ("Proof.")
print ("  eapply compose_monotone"+str(n)+". apply gf_mon. apply rclo"+str(n)+"_mon.")
print ("Qed.")
print ("")
print ("Hint Resolve cpaco"+str(n)+"_def_mon : paco.")
print ("")
print ("Lemma cpaco"+str(n)+"_mon r r' rg rg'"+itrstr(" x", n)+"")
print ("      (IN: @cpaco"+str(n)+" r rg"+itrstr(" x", n)+")")
print ("      (LEr: r <"+str(n)+"= r')")
print ("      (LErg: rg <"+str(n)+"= rg'):")
print ("  @cpaco"+str(n)+" r' rg'"+itrstr(" x", n)+".")
print ("Proof.")
print ("  destruct IN. econstructor.")
print ("  eapply rclo"+str(n)+"_mon. apply IN.")
print ("  intros. destruct PR. left. apply LEr, H.")
print ("  right. eapply paco"+str(n)+"_mon. apply H. apply LErg.")
print ("Qed.")
print ("")
print ("Lemma cpaco"+str(n)+"_base r rg: r <"+str(n)+"= cpaco"+str(n)+" r rg.")
print ("Proof.")
print ("  econstructor. apply rclo"+str(n)+"_base. left. apply PR.")
print ("Qed.")
print ("")
print ("Lemma cpaco"+str(n)+"_rclo r rg:")
print ("  rclo"+str(n)+" clo (cpaco"+str(n)+" r rg) <"+str(n)+"= cpaco"+str(n)+" r rg.")
print ("Proof.")
print ("  intros. econstructor. apply rclo"+str(n)+"_rclo.")
print ("  eapply rclo"+str(n)+"_mon. apply PR.")
print ("  intros. apply PR0.")
print ("Qed.")
print ("")
print ("Lemma cpaco"+str(n)+"_clo r rg:")
print ("  clo (cpaco"+str(n)+" r rg) <"+str(n)+"= cpaco"+str(n)+" r rg.")
print ("Proof.")
print ("  intros. apply cpaco"+str(n)+"_rclo. apply rclo"+str(n)+"_clo.")
print ("  eapply clo_compat. apply PR.")
print ("  intros. apply rclo"+str(n)+"_base. apply PR0.")
print ("Qed.")
print ("")
print ("Lemma cpaco"+str(n)+"_step r rg:")
print ("  gf (cpaco"+str(n)+" rg rg) <"+str(n)+"= cpaco"+str(n)+" r rg.")
print ("Proof.")
print ("  intros. econstructor. apply rclo"+str(n)+"_base. right.")
print ("  pstep. eapply gf_mon. apply PR.")
print ("  intros. destruct PR0.")
print ("  eapply rclo"+str(n)+"_mon. apply IN.")
print ("  intros. destruct PR0; [right|left]; apply H.")
print ("Qed.")
print ("")
print ("Lemma cpaco"+str(n)+"_init:")
print ("  cpaco"+str(n)+" bot"+str(n)+" bot"+str(n)+" <"+str(n)+"= paco"+str(n)+" gf bot"+str(n)+".")
print ("Proof.")
print ("  intros. destruct PR. revert"+itrstr(" x", n)+" IN.")
print ("  pcofix CIH. intros.")
print ("  pstep. eapply gf_mon; [| right; apply CIH, rclo"+str(n)+"_rclo, PR]. ")
print ("  apply compat"+str(n)+"_compat. apply rclo"+str(n)+"_compat. apply gf_mon. apply clo_compat.")
print ("  eapply rclo"+str(n)+"_mon. apply IN.")
print ("  intros. destruct PR. contradiction.")
print ("  punfold H. eapply cpaco"+str(n)+"_def_mon. apply H.")
print ("  intros. pclearbot. right. apply PR.")
print ("Qed.")
print ("")
print ("Lemma cpaco"+str(n)+"_final:")
print ("  paco"+str(n)+" gf bot"+str(n)+" <"+str(n)+"= cpaco"+str(n)+" bot"+str(n)+" bot"+str(n)+".")
print ("Proof.")
print ("  intros. econstructor. apply rclo"+str(n)+"_base.")
print ("  right. eapply paco"+str(n)+"_mon_bot. apply PR.")
print ("  intros. eapply gf_mon. apply PR0.")
print ("  intros. apply rclo"+str(n)+"_base. apply PR1.")
print ("Qed.")
print ("")
print ("Lemma cpaco"+str(n)+"_unfold:")
print ("  cpaco"+str(n)+" bot"+str(n)+" bot"+str(n)+" <"+str(n)+"= gf (cpaco"+str(n)+" bot"+str(n)+" bot"+str(n)+").")
print ("Proof.")
print ("  intros. apply cpaco"+str(n)+"_init in PR. punfold PR.")
print ("  eapply gf_mon. apply PR.")
print ("  intros. pclearbot. apply cpaco"+str(n)+"_final, PR0.")
print ("Qed.")
print ("")
print ("Lemma cpaco"+str(n)+"_cofix")
print ("      r rg (LE: r <"+str(n)+"= rg)")
print ("      l (OBG: forall rr (INC: rg <"+str(n)+"= rr) (CIH: l <"+str(n)+"= rr), l <"+str(n)+"= cpaco"+str(n)+" r rr):")
print ("  l <"+str(n)+"= cpaco"+str(n)+" r rg.")
print ("Proof.")
print ("  assert (IN: l <"+str(n)+"= cpaco"+str(n)+" r (rg \\"+str(n)+"/ l)).")
print ("  { intros. apply OBG; [left; apply PR0 | right; apply PR0 | apply PR]. }")
print ("  clear OBG. intros. apply IN in PR.")
print ("  destruct PR. econstructor.")
print ("  eapply rclo"+str(n)+"_mon. apply IN0.")
print ("  clear"+itrstr(" x", n)+" IN0.")
print ("  intros. destruct PR. left. apply H.")
print ("  right. revert"+itrstr(" x", n)+" H.")
print ("  pcofix CIH. intros.")
print ("  punfold H0. pstep.")
print ("  eapply gf_mon. apply H0. intros.")
print ("  apply rclo"+str(n)+"_rclo. eapply rclo"+str(n)+"_mon. apply PR.")
print ("  intros. destruct PR0.")
print ("  - apply rclo"+str(n)+"_base. right. apply CIH. apply H.")
print ("  - destruct H.")
print ("    + apply rclo"+str(n)+"_base. right. apply CIH0, H.")
print ("    + apply IN in H. destruct H.")
print ("      eapply rclo"+str(n)+"_mon. apply IN0.")
print ("      intros. destruct PR0.")
print ("      * right. apply CIH0. apply LE, H.")
print ("      * right. apply CIH. apply H.")
print ("Qed.")
print ("")
print ("Lemma cpaco"+str(n)+"_cupaco")
print ("      r rg (LE: r <"+str(n)+"= rg):")
print ("  cupaco"+str(n)+" (cpaco"+str(n)+" r rg) <"+str(n)+"= cpaco"+str(n)+" r rg.")
print ("Proof.")
print ("  eapply cpaco"+str(n)+"_cofix. apply LE.")
print ("  intros. destruct PR. econstructor.")
print ("  apply rclo"+str(n)+"_rclo. eapply rclo"+str(n)+"_mon. apply IN.")
print ("  intros. destruct PR.")
print ("  - destruct H.  eapply rclo"+str(n)+"_mon. apply IN0.")
print ("    intros. destruct PR. left. apply H.")
print ("    right. eapply paco"+str(n)+"_mon. apply H. apply INC.")
print ("  - apply rclo"+str(n)+"_base. right.")
print ("    eapply paco"+str(n)+"_mon. apply H.")
print ("    intros. apply CIH.")
print ("    econstructor. apply rclo"+str(n)+"_base. left. apply PR.")
print ("Qed.")
print ("")
print ("End CompatiblePaco"+str(n)+"_main.")
print ("")
print ("Lemma cpaco"+str(n)+"_mon_gen (gf gf' clo clo': rel -> rel)"+itrstr(" x", n)+" r r' rg rg'")
print ("      (IN: @cpaco"+str(n)+" gf clo r rg"+itrstr(" x", n)+")")
print ("      (MON: monotone"+str(n)+" gf)")
print ("      (LEgf: gf <"+str(n+1)+"= gf')")
print ("      (LEclo: clo <"+str(n+1)+"= clo')")
print ("      (LEr: r <"+str(n)+"= r')")
print ("      (LErg: rg <"+str(n)+"= rg') :")
print ("  @cpaco"+str(n)+" gf' clo' r' rg'"+itrstr(" x", n)+".")
print ("Proof.")
print ("  eapply cpaco"+str(n)+"_mon; [|apply LEr|apply LErg].")
print ("  destruct IN. econstructor.")
print ("  eapply rclo"+str(n)+"_mon_gen, IN. apply LEclo.")
print ("  intros. destruct PR. left; apply H.")
print ("  right. eapply paco"+str(n)+"_mon_gen. apply H.")
print ("  - intros. eapply LEgf.")
print ("    eapply MON. apply PR.")
print ("    eapply rclo"+str(n)+"_mon_gen. apply LEclo. intros; apply PR0.")
print ("  - intros. apply PR.")
print ("Qed.")
print ("")
print ("End CompatiblePaco"+str(n)+".")
print ("")
print ("Hint Resolve cpaco"+str(n)+"_base : paco.")
print ("Hint Resolve cpaco"+str(n)+"_step : paco.")
print ("Hint Resolve rclo"+str(n)+"_base : paco.")
print ("Hint Resolve rclo"+str(n)+"_clo : paco.")
