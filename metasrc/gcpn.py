from __future__ import print_function
import sys
from pacolib import *

if len(sys.argv) < 2:
    sys.stderr.write("\nUsage: "+sys.argv[0]+" relsize\n\n")
    sys.exit(1)

relsize = int(sys.argv[1])
n = relsize

print ("Require Import paco"+str(n)+" pcpn"+str(n)+" pcpntac.")
print ("Set Implicit Arguments.")
print ("")

print ("Section GeneralizedCompanion"+str(n)+".")
print ("")

for i in range(n):
    print ("Variable T"+str(i)+" : "+ifpstr(i,"forall"),end="")
    for j in range(i):
        print (" (x"+str(j)+": @T"+str(j)+itrstr(" x",j)+")",end="")
    print (ifpstr(i,", ")+"Type.")
print ("")

print ("Local Notation rel := (rel"+str(n)+itrstr(" T", n)+").")
print ("")

print ("Section GeneralizedCompanion"+str(n)+"_main.")
print ("")

print ("Variable gf: rel -> rel.")
print ("Hypothesis gf_mon: monotone"+str(n)+" gf.")
print ("")

print ("Inductive gcpn"+str(n)+" (r rg : rel)"+itrstr(" x",n)+" : Prop :=")
print ("| gcpn"+str(n)+"_intro (IN: ucpn"+str(n)+" gf (r \\"+str(n)+"/ pcpn"+str(n)+" gf rg)"+itrstr(" x",n)+")")
print (".")
print ("")
print ("Lemma gcpn"+str(n)+"_mon r r' rg rg'"+itrstr(" x",n)+"")
print ("      (IN: @gcpn"+str(n)+" r rg"+itrstr(" x",n)+")")
print ("      (LEr: r <"+str(n)+"= r')")
print ("      (LErg: rg <"+str(n)+"= rg'):")
print ("  @gcpn"+str(n)+" r' rg'"+itrstr(" x",n)+".")
print ("Proof.")
print ("  destruct IN. constructor.")
print ("  eapply ucpn"+str(n)+"_mon. apply IN. intros.")
print ("  destruct PR. left. apply LEr, H. right.")
print ("  eapply pcpn"+str(n)+"_mon. apply H. apply LErg.")
print ("Qed.")
print ("")
print ("Lemma gcpn"+str(n)+"_init r: gcpn"+str(n)+" r r <"+str(n)+"= ucpn"+str(n)+" gf r.")
print ("Proof.")
print ("  intros. ucpn. destruct PR.")
print ("  eapply ucpn"+str(n)+"_mon; [apply IN|].")
print ("  intros. destruct PR.")
print ("  - ubase. apply H.")
print ("  - uunfold H. ustep. apply H.")
print ("Qed.")
print ("")
print ("Lemma gcpn"+str(n)+"_final r rg: ucpn"+str(n)+" gf r <"+str(n)+"= gcpn"+str(n)+" r rg.")
print ("Proof.")
print ("  constructor. eapply ucpn"+str(n)+"_mon. apply PR.")
print ("  intros. left. apply PR0.")
print ("Qed.")
print ("")
print ("Lemma gcpn"+str(n)+"_unfold:")
print ("  gcpn"+str(n)+" bot"+str(n)+" bot"+str(n)+" <"+str(n)+"= gf (gcpn"+str(n)+" bot"+str(n)+" bot"+str(n)+").")
print ("Proof.")
print ("  intros. destruct PR. destruct IN.")
print ("  - uunfold H. eapply gf_mon. apply H.")
print ("    intros. econstructor. apply PR.")
print ("  - eapply gf_mon; [| intros; econstructor; right; apply PR].")
print ("    eapply (dcompat"+str(n)+"_compat (dcpn"+str(n)+"_compat gf_mon)).")
print ("    eapply dcpn"+str(n)+"_mon. apply H.")
print ("    intros. destruct PR; try contradiction.")
print ("    uunfold H0. eapply gf_mon. apply H0.")
print ("    intros. right.")
print ("    apply pcpn"+str(n)+"_final, ucpn"+str(n)+"_init. apply gf_mon. apply PR.")
print ("Qed.")
print ("")
print ("Lemma gcpn"+str(n)+"_base r rg:")
print ("  r <"+str(n)+"= gcpn"+str(n)+" r rg.")
print ("Proof.")
print ("  intros. constructor. ubase. left. apply PR.")
print ("Qed.")
print ("")
print ("Lemma gcpn"+str(n)+"_step r rg:")
print ("  gf (gcpn"+str(n)+" rg rg) <"+str(n)+"= gcpn"+str(n)+" r rg.")
print ("Proof.")
print ("  intros. constructor. ubase. right. ustep.")
print ("  eapply gf_mon. apply PR.")
print ("  intros. destruct PR0.")
print ("  apply ucpn"+str(n)+"_ucpn. apply gf_mon.")
print ("  eapply ucpn"+str(n)+"_mon. apply IN.")
print ("  intros. destruct PR0.")
print ("  - ubase. apply H.")
print ("  - left. apply H.")
print ("Qed.")
print ("")
print ("Lemma gcpn"+str(n)+"_ucpn r rg:")
print ("  ucpn"+str(n)+" gf (gcpn"+str(n)+" r rg) <"+str(n)+"= gcpn"+str(n)+" r rg.")
print ("Proof.")
print ("  intros. constructor. ucpn.")
print ("  eapply ucpn"+str(n)+"_mon. apply PR.")
print ("  intros. destruct PR0. apply IN.")
print ("Qed.")
print ("")
print ("Lemma gcpn"+str(n)+"_clo r rg")
print ("      clo (LE: clo <"+str(n+1)+"= ucpn"+str(n)+" gf):")
print ("  clo (gcpn"+str(n)+" r rg) <"+str(n)+"= gcpn"+str(n)+" r rg.")
print ("Proof.")
print ("  intros. apply gcpn"+str(n)+"_ucpn, LE, PR.")
print ("Qed.")
print ("")
print ("(*")
print ("  Fixpoint theorem of gcpn"+str(n)+"")
print (" *)")
print ("")
print ("Lemma gcpn"+str(n)+"_cofix: forall")
print ("    r rg (LE: r <"+str(n)+"= rg)")
print ("    l (OBG: forall rr (INC: rg <"+str(n)+"= rr) (CIH: l <"+str(n)+"= rr), l <"+str(n)+"= gcpn"+str(n)+" r rr),")
print ("  l <"+str(n)+"= gcpn"+str(n)+" r rg.")
print ("Proof.")
print ("Admitted.")
print ("")
print ("End GeneralizedCompanion"+str(n)+"_main.")
print ("")
print ("Lemma gcpn"+str(n)+"_mon_bot (gf gf': rel -> rel)"+itrstr(" x",n)+" r rg")
print ("      (IN: @gcpn"+str(n)+" gf bot"+str(n)+" bot"+str(n)+""+itrstr(" x",n)+")")
print ("      (MON: monotone"+str(n)+" gf)")
print ("      (MON': monotone"+str(n)+" gf')")
print ("      (LE: gf <"+str(n+1)+"= gf'):")
print ("  @gcpn"+str(n)+" gf' r rg"+itrstr(" x",n)+".")
print ("Proof.")
print ("  destruct IN. constructor.")
print ("  eapply ucpn"+str(n)+"_mon; [| intros; right; eapply PR].")
print ("  ubase.")
print ("  eapply pcpn"+str(n)+"_mon_bot, LE; [|apply MON].")
print ("  ustep.")
print ("  eapply MON, ucpn"+str(n)+"_ucpn, MON.")
print ("  eapply ucpn"+str(n)+"_compat; [apply MON|].")
print ("  eapply ucpn"+str(n)+"_mon. apply IN.")
print ("  intros. destruct PR. contradiction. uunfold H. apply H.")
print ("Qed.")
print ("")
print ("End GeneralizedCompanion"+str(n)+".")
print ("")
print ("Hint Resolve gcpn"+str(n)+"_base : paco.")
print ("Hint Resolve gcpn"+str(n)+"_step : paco.")
print ("")
